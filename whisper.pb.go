// Code generated by protoc-gen-go. DO NOT EDIT.
// source: whisper.proto

package whisper // import "github.com/pokstad/whisper"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Secret struct {
	RecipientAlias       string   `protobuf:"bytes,1,opt,name=recipient_alias,json=recipientAlias,proto3" json:"recipient_alias,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Secret) Reset()         { *m = Secret{} }
func (m *Secret) String() string { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()    {}
func (*Secret) Descriptor() ([]byte, []int) {
	return fileDescriptor_whisper_5292b4d6d8378f57, []int{0}
}
func (m *Secret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secret.Unmarshal(m, b)
}
func (m *Secret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secret.Marshal(b, m, deterministic)
}
func (dst *Secret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret.Merge(dst, src)
}
func (m *Secret) XXX_Size() int {
	return xxx_messageInfo_Secret.Size(m)
}
func (m *Secret) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret.DiscardUnknown(m)
}

var xxx_messageInfo_Secret proto.InternalMessageInfo

func (m *Secret) GetRecipientAlias() string {
	if m != nil {
		return m.RecipientAlias
	}
	return ""
}

func (m *Secret) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Identity struct {
	Alias                string   `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Identity) Reset()         { *m = Identity{} }
func (m *Identity) String() string { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()    {}
func (*Identity) Descriptor() ([]byte, []int) {
	return fileDescriptor_whisper_5292b4d6d8378f57, []int{1}
}
func (m *Identity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identity.Unmarshal(m, b)
}
func (m *Identity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identity.Marshal(b, m, deterministic)
}
func (dst *Identity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identity.Merge(dst, src)
}
func (m *Identity) XXX_Size() int {
	return xxx_messageInfo_Identity.Size(m)
}
func (m *Identity) XXX_DiscardUnknown() {
	xxx_messageInfo_Identity.DiscardUnknown(m)
}

var xxx_messageInfo_Identity proto.InternalMessageInfo

func (m *Identity) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Identity) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*Secret)(nil), "Secret")
	proto.RegisterType((*Identity)(nil), "Identity")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WhispererClient is the client API for Whisperer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WhispererClient interface {
	// Handshake exchanges aliases between servers
	Handshake(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error)
	// Whisper requests a message to be sent to a server with the given alias
	Whisper(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*empty.Empty, error)
}

type whispererClient struct {
	cc *grpc.ClientConn
}

func NewWhispererClient(cc *grpc.ClientConn) WhispererClient {
	return &whispererClient{cc}
}

func (c *whispererClient) Handshake(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := c.cc.Invoke(ctx, "/Whisperer/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whispererClient) Whisper(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Whisperer/Whisper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhispererServer is the server API for Whisperer service.
type WhispererServer interface {
	// Handshake exchanges aliases between servers
	Handshake(context.Context, *Identity) (*Identity, error)
	// Whisper requests a message to be sent to a server with the given alias
	Whisper(context.Context, *Secret) (*empty.Empty, error)
}

func RegisterWhispererServer(s *grpc.Server, srv WhispererServer) {
	s.RegisterService(&_Whisperer_serviceDesc, srv)
}

func _Whisperer_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhispererServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Whisperer/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhispererServer).Handshake(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whisperer_Whisper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhispererServer).Whisper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Whisperer/Whisper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhispererServer).Whisper(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

var _Whisperer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Whisperer",
	HandlerType: (*WhispererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _Whisperer_Handshake_Handler,
		},
		{
			MethodName: "Whisper",
			Handler:    _Whisperer_Whisper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whisper.proto",
}

func init() { proto.RegisterFile("whisper.proto", fileDescriptor_whisper_5292b4d6d8378f57) }

var fileDescriptor_whisper_5292b4d6d8378f57 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0xc1, 0x4a, 0xc4, 0x30,
	0x14, 0xdc, 0x15, 0xdd, 0xda, 0x07, 0x2a, 0x3c, 0x44, 0x4a, 0xf5, 0x20, 0xf5, 0xa0, 0x07, 0x49,
	0x41, 0xfd, 0x01, 0x05, 0x41, 0xf1, 0xa6, 0x07, 0xc1, 0x83, 0x92, 0x36, 0xcf, 0x36, 0xec, 0xb6,
	0x09, 0xc9, 0x5b, 0x64, 0xff, 0x5e, 0x9a, 0xb4, 0xba, 0xb7, 0x37, 0x93, 0x99, 0x61, 0x26, 0x70,
	0xf0, 0xd3, 0x6a, 0x6f, 0xc9, 0x09, 0xeb, 0x0c, 0x9b, 0xfc, 0xb4, 0x31, 0xa6, 0x59, 0x51, 0x19,
	0x50, 0xb5, 0xfe, 0x2e, 0xa9, 0xb3, 0xbc, 0x89, 0x8f, 0xc5, 0x0b, 0x2c, 0xde, 0xa8, 0x76, 0xc4,
	0x78, 0x09, 0x47, 0x8e, 0x6a, 0x6d, 0x35, 0xf5, 0xfc, 0x25, 0x57, 0x5a, 0xfa, 0x6c, 0x7e, 0x3e,
	0xbf, 0x4a, 0x5f, 0x0f, 0xff, 0xe8, 0xfb, 0x81, 0xc5, 0x0c, 0x92, 0x8e, 0xbc, 0x97, 0x0d, 0x65,
	0x3b, 0x41, 0x30, 0xc1, 0xe2, 0x0e, 0xf6, 0x9f, 0x15, 0xf5, 0xac, 0x79, 0x83, 0xc7, 0xb0, 0xb7,
	0x1d, 0x12, 0x01, 0x22, 0xec, 0x4a, 0xa5, 0xdc, 0x68, 0x0c, 0xf7, 0xcd, 0x27, 0xa4, 0xef, 0xb1,
	0x30, 0x39, 0xbc, 0x80, 0xf4, 0x49, 0xf6, 0xca, 0xb7, 0x72, 0x49, 0x98, 0x8a, 0x29, 0x2e, 0xff,
	0x3f, 0x8b, 0x19, 0x5e, 0x43, 0x32, 0x3a, 0x30, 0x11, 0xb1, 0x7e, 0x7e, 0x22, 0xe2, 0x4c, 0x31,
	0xcd, 0x14, 0x8f, 0xc3, 0xcc, 0x62, 0xf6, 0x70, 0xf6, 0x91, 0x37, 0x9a, 0xdb, 0x75, 0x25, 0x6a,
	0xd3, 0x95, 0xd6, 0x2c, 0x3d, 0x4b, 0x55, 0x8e, 0x7f, 0x54, 0x2d, 0x82, 0xfe, 0xf6, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x4d, 0xc8, 0x29, 0x99, 0x35, 0x01, 0x00, 0x00,
}
